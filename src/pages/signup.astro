---
export const prerender = false;

import "../styles/styles.css";
import { getAuth } from "firebase-admin/auth";
import { app } from "../lib/firebase_server.ts";
import { actions } from "astro:actions";

/* Check if the user is authenticated */
const auth = getAuth(app);
if (Astro.cookies.has("__session")) {
  const sessionCookie = Astro.cookies.get("__session")?.value;
  if (sessionCookie) {
    const decodedCookie = await auth.verifySessionCookie(sessionCookie);
    if (decodedCookie) {
      return Astro.redirect("/");
    }
  }
}
---

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Sign Up - Math Arena</title>
</head>

<body id="login-signup-body">
  <div class="login-signup-container">
    <h1>Create an Account</h1>
    <p id="error-message" class="error-message"></p>

    <form id="signup-form">
      <div class="input-group">
        <label for="name">Full Name</label>
        <input type="text" id="name" name="name" required />
      </div>

      <div class="input-group">
        <label for="email">Email</label>
        <input type="email" id="email" name="email" required />
      </div>

      <div class="input-group">
        <label for="password">Password</label>
        <input type="password" id="password" name="password" required />
      </div>

      <button type="submit">Sign Up</button>
    </form>

    <p>Already have an account? <a href="/login">Log in</a></p>
    <a href="/"> Continue without an account </a>
  </div>

  <script>
    import {
      getAuth,
      inMemoryPersistence,
      createUserWithEmailAndPassword,
      updateProfile,
    } from "firebase/auth";
    import { app } from "../lib/firebase_client.ts";
    import type { AuthError } from "firebase/auth";
    import { actions } from "astro:actions";

    const auth = getAuth(app);
    // This will prevent the browser from storing session data
    auth.setPersistence(inMemoryPersistence);

    const signupForm = document.getElementById(
      "signup-form",
    ) as HTMLFormElement;
    const errorMessageEl = document.getElementById(
      "error-message",
    ) as HTMLParagraphElement;

    signupForm.addEventListener("submit", async (event) => {
      event.preventDefault();

      const formData = new FormData(signupForm);
      const name = formData.get("name")?.toString();
      const email = formData.get("email")?.toString();
      const password = formData.get("password")?.toString();

      if (!name || !email || !password) {
        errorMessageEl.textContent = "Please fill in all fields";
        return;
      }

      try {
        // Create user in Firebase
        const userCredential = await createUserWithEmailAndPassword(
          auth,
          email,
          password,
        );

        // Update profile with display name
        await updateProfile(userCredential.user, {
          displayName: name,
        });

        // Get ID token for server action
        const idToken = await userCredential.user.getIdToken();

        // Call the register action with the token
        await actions.register({
          email,
          password,
          name,
          idToken,
        });

        // Redirect to login page after successful registration
        window.location.href = "/login";
      } catch (error) {
        const authError = error as AuthError;

        // Handle specific Firebase Auth error codes
        if (authError.code === "auth/email-already-exists") {
          errorMessageEl.textContent =
            "An account with this email already exists.";
        } else if (authError.code === "auth/invalid-email") {
          errorMessageEl.textContent = "Please provide a valid email address.";
        } else if (authError.code === "auth/weak-password") {
          errorMessageEl.textContent =
            "Password should be at least 6 characters.";
        } else {
          errorMessageEl.textContent =
            authError.message || "Failed to create account. Please try again.";
        }
      }
    });
  </script>
</body>
