---
export const prerender = false;

import '../styles/styles.css';
import { getAuth } from "firebase-admin/auth";
import {app} from "../lib/firebase_server.ts";
import {actions} from "astro:actions";

/* Check if the user is authenticated */
const auth = getAuth(app);
if (Astro.cookies.has("__session")) {
  const sessionCookie = Astro.cookies.get("__session")?.value;
  if (sessionCookie) {
    try {
      const decodedCookie = await auth.verifySessionCookie(sessionCookie);
      return Astro.redirect("/");
    } catch {}
  }
}
---

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Login - Math Arena</title>
</head>

<body id="login-signup-body">
  <div class="login-signup-container">
    <h1>Login to Math Arena</h1>
    <p id="error-message" class="error-message"></p>

    <form id="login-form">
      <div class="input-group">
        <label for="email">Email</label>
        <input type="email" id="email" name="email" required />
      </div>

      <div class="input-group">
        <label for="password">Password</label>
        <input type="password" id="password" name="password" required />
      </div>

      <button type="submit">Login</button>
    </form>
 
    <p>Don't have an account? <a href="/signup">Sign Up</a></p>
    <a href="/"> Continue without an account </a>
  </div>

  <script>
    import {
      getAuth,
      inMemoryPersistence,
      signInWithEmailAndPassword,
    } from "firebase/auth";
    import { app } from "../lib/firebase_client.ts";
    import type { AuthError } from 'firebase/auth';
    import { actions } from 'astro:actions';

    const auth = getAuth(app);
    // This will prevent the browser from storing session data
    auth.setPersistence(inMemoryPersistence);

    const loginForm = document.getElementById("login-form") as HTMLFormElement;
    const errorMessageEl = document.getElementById("error-message") as HTMLParagraphElement;

    // Inside login.astro script section, modify the event listener:
    loginForm.addEventListener("submit", async (event) => {
  event.preventDefault();

  const formData = new FormData(loginForm);
  const email = formData.get("email")?.toString();
  const password = formData.get("password")?.toString();

  if (!email || !password) {
    errorMessageEl.textContent = "Please fill in all fields";
    return;
  }

  try {
    const userCredential = await signInWithEmailAndPassword(auth, email, password);
    
    // Check if email is verified
    if (!userCredential.user.emailVerified) {
      errorMessageEl.textContent = "Please verify your email before logging in.";
      return;
    }

    const idToken = await userCredential.user.getIdToken();
    await actions.login({ idToken });

    // Redirect to the home page after successful login
    window.location.href = "/";
  } catch (error) {
    const authError = error as AuthError;
    errorMessageEl.textContent = authError.message || "Login failed. Please try again.";
  }
});
  </script>
</body>
