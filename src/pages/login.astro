---
export const prerender = false;

import MathPage from "../layouts/MathPage.astro";

/* Check if the user is authenticated */
if (Astro.locals.decodedCookie) {
  return Astro.redirect("/");
}
---

<MathPage title="Login - Math Arena" back="/" hideLogin={true}>
  <h1>Login to Math Arena</h1>

  <p id="error-message" class="error-message"></p>

  <form id="login-form">
    <div class="input-group">
      <label for="email">Email</label>
      <input type="email" id="email" name="email" required />
    </div>

    <div class="input-group">
      <label for="password">Password</label>
      <input type="password" id="password" name="password" required />
    </div>

    <button type="submit">Login</button>
  </form>

  <p>Don't have an account? <a href="/signup">Sign Up</a></p>
  <p><a href="/">Continue without an account</a></p>

  <script>
    import { actions } from "astro:actions";
    import { app } from "../lib/firebase_client";
    import type { AuthError } from "firebase/auth";
    import {
      getAuth,
      inMemoryPersistence,
      signInWithEmailAndPassword,
    } from "firebase/auth";

    const auth = getAuth(app);
    // This will prevent the browser from storing session data
    auth.setPersistence(inMemoryPersistence);

    const loginForm = document.getElementById("login-form") as HTMLFormElement;
    const errorMessageEl = document.getElementById(
      "error-message",
    ) as HTMLParagraphElement;

    // Inside login.astro script section, modify the event listener:
    loginForm.addEventListener("submit", async (event) => {
      event.preventDefault();

      const formData = new FormData(loginForm);
      const email = formData.get("email")?.toString();
      const password = formData.get("password")?.toString();

      if (!email || !password) {
        errorMessageEl.textContent = "Please fill in all fields";
        return;
      }

      try {
        const userCredential = await signInWithEmailAndPassword(
          auth,
          email,
          password,
        );
        const idToken = await userCredential.user.getIdToken();

        await actions.login({ idToken });

        // Redirect to the home page after successful login
        window.location.href = "/";
      } catch (error: unknown) {
        const authError = error as AuthError;
        errorMessageEl.textContent =
          authError.message || "Login failed. Please try again.";
      }
    });
  </script>
</MathPage>
