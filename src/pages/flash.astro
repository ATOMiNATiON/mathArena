---
export const prerender = false;

import "../styles/styles.css";
import Button from "../components/Button.astro";
import Accuracy from "../components/Accuracy.astro";
import ScoreBox from "../components/ScoreBox.astro";
import { getAuth } from "firebase-admin/auth";
import { app } from "../lib/firebase_server.ts";

let loggedIn = false;
const auth = getAuth(app);
if (Astro.cookies.has("__session")) {
  const sessionCookie = Astro.cookies.get("__session")?.value;
  if (sessionCookie) {
    try {
      await auth.verifySessionCookie(sessionCookie);
    } catch {}
  }
}
---

<head>
  <title>Flashing Numbers</title>
</head>

<body>
  <ScoreBox server:defer />
  <Accuracy server:defer />

  <div class="flash-container">
    <div id="currentlyFlashing" class="currently-flashing"></div>
    <div id="flashContainer" class="flash-number"></div>

    <input
      id="resultInput"
      class="result-input"
      type="text"
      placeholder="Enter result"
    />

    <Button
      id="submitButton"
      size="lg"
      backgroundColor="#4ea7f5"
      textColor="white"
      borderColor="transparent"
    >
      Submit Answer
    </Button>

    <Button
      id="backButton"
      size="lg"
      backgroundColor="#4ea7f5"
      textColor="white"
      borderColor="transparent"
      href="/"
    >
      Back
    </Button>

    <Button
      id="newProblem"
      size="lg"
      backgroundColor="#4ea7f5"
      textColor="white"
      borderColor="transparent"
    >
      <span class="reload">&#x21bb;</span>
    </Button>

    <Button
      id="previousProblem"
      size="lg"
      backgroundColor="#4ea7f5"
      textColor="white"
      borderColor="transparent"
    >
      Previous
    </Button>

    <div id="resultMessage"></div>
  </div>

  <script>
    import { ProblemGenerator, ProblemSet } from "../lib/ProblemGenerator";
    import { ArithmeticType } from "../lib/enums";
    import { updateScore } from "../lib/score_client";
    import { updateAccuracy } from "../lib/accuracy_client";

    if (localStorage.getItem("totalCorrect") === null) {
      localStorage.setItem("totalCorrect", "0");
    }
    if (localStorage.getItem("totalIncorrect") === null) {
      localStorage.setItem("totalIncorrect", "0");
    }

    const savedTheme = localStorage.getItem("selectedTheme");
    if (savedTheme) {
      document.body.style.backgroundImage = `url('/background.svg?color=${savedTheme.slice(1)}')`;
    }

    const params = new URLSearchParams(window.location.search);
    const arithType = parseInt(params.get("arithType") || "0"); // Arithmetic Types: Add/Sub (0), Multiplication (1), Division (2)
    const digits = parseInt(params.get("digits") || "0");
    const digits1 = parseInt(params.get("digits1") || "0");
    const digits2 = parseInt(params.get("digits2") || "0");
    const numbers = parseInt(params.get("numbers") || "0");
    const speed = parseFloat(params.get("speed") || "0");

    const problemGen = new ProblemGenerator();
    let problemSet!: ProblemSet;

    // Generate Problem Set based on Arithmetic Type
    switch (arithType) {
      case ArithmeticType.AddSub: {
        problemSet = problemGen.addSubtract(numbers, digits);
        break;
      }
      case ArithmeticType.Multiplication: {
        problemSet = problemGen.multiply(digits1, digits2);
        break;
      }
      case ArithmeticType.Division: {
        problemSet = problemGen.divide(digits1, digits2);
        break;
      }
    }

    function flashNumbers(
      numbersArr: number[],
      speedSeconds: number,
      arithType: number,
    ) {
      const currentlyFlashing = document.getElementById("currentlyFlashing")!;
      const flashContainer = document.getElementById("flashContainer")!;
      const resultInput = document.getElementById("resultInput")!;
      const backButton = document.getElementById("backButton")!;
      const newProblem = document.getElementById("newProblem")!;

      const submitButton = document.getElementById("submitButton")!;

      let index = 0;
      const showTime = speedSeconds * 1000;

      function showNextNumber() {
        if (index >= numbersArr.length) {
          if (flashContainer) {
            flashContainer.textContent = "";
          }
          if (currentlyFlashing) {
            currentlyFlashing.style.visibility = "hidden";
          }
          setTimeout(() => {
            if (flashContainer) {
              flashContainer.textContent = "Answer";
            }
            if (resultInput) {
              resultInput.style.display = "inline-block";
            }
            if (backButton) {
              backButton.style.display = "block";
            }
            if (newProblem) {
              newProblem.style.display = "block";
            }
            if (submitButton) {
              submitButton.style.display = "block";
            }
          }, 1000);
          return;
        }

        if (currentlyFlashing) {
          currentlyFlashing.style.visibility = "visible";
        }

        if (flashContainer) {
          switch (arithType) {
            case ArithmeticType.AddSub: {
              flashContainer.textContent = numbersArr[index].toString();
              break;
            }
            case ArithmeticType.Multiplication: {
              flashContainer.textContent =
                numbersArr[index].toString() +
                " ร " +
                numbersArr[++index].toString();
              break;
            }
            case ArithmeticType.Division: {
              flashContainer.textContent =
                numbersArr[index].toString() +
                " รท " +
                numbersArr[++index].toString();
              break;
            }
          }
        }

        index++;

        setTimeout(() => {
          if (flashContainer) {
            flashContainer.textContent = "";
          }
          setTimeout(showNextNumber, showTime);
        }, showTime);
      }

      showNextNumber();
    }

    flashNumbers(problemSet.entries, speed, arithType);

    const backButton = document.getElementById("backButton");
    if (backButton) {
      backButton.style.display = "none";
    }
    if (backButton) {
      backButton.addEventListener("click", () => {
        window.history.back();
      });
    }
    const newProblem = document.getElementById("newProblem");
    if (newProblem) {
      newProblem.addEventListener("click", () => {
        window.location.reload();
      });
    }

    let currentStreak = parseInt(localStorage.getItem("currentStreak") || "0");

    function updateStreak(newStreak: number) {
      currentStreak = newStreak + 1;
      localStorage.setItem("currentStreak", currentStreak.toString());
    }

    function checkAnswer() {
      const submitButton = document.getElementById("submitButton") as HTMLButtonElement;
      const resultInput = document.getElementById("resultInput") as HTMLInputElement;
      const resultMessage = document.getElementById("resultMessage");
      const previousProblem = document.getElementById("previousProblem");

      if (resultInput && submitButton && resultMessage) {
        const userInput = resultInput.value.trim();

        resultInput.disabled = true;
        submitButton.disabled = true;

        const currentCorrectCount = parseInt(localStorage.getItem("totalCorrect") || "0", 10);
        const currentIncorrectCount = parseInt(localStorage.getItem("totalIncorrect") || "0", 10);
        const totalAnswers = currentCorrectCount + currentIncorrectCount;
        const accuracy = totalAnswers > 0 ? (currentCorrectCount / totalAnswers) * 100 : 0;

        if (userInput === problemSet.result.toString()) {
          updateScore(1);
          updateAccuracy(1, 0);
          
          resultMessage.textContent = "Correct!";
          resultMessage.className = "correct";

        } else {
          updateScore(-1);
          updateAccuracy(0, 1);
          resultMessage.textContent = `Incorrect, the correct answer is: ${problemSet.result}`;
          resultMessage.className = "incorrect";
        }

        if (previousProblem) {
          previousProblem.addEventListener("click", () => {
            localStorage.setItem(
              "previousEntries",
              JSON.stringify(problemSet.entries),
            );
            localStorage.setItem(
              "previousResult",
              JSON.stringify(problemSet.result),
            );
            localStorage.setItem(
              "previousArithmeticType",
              JSON.stringify(arithType),
            );

            window.location.href = "/previous";
          });
        }

        resultMessage.style.display = "block";
        if (previousProblem) {
          previousProblem.style.display = "block";
        }
      }
    }

    const submitButton = document.getElementById("submitButton");
    if (submitButton) {
      submitButton.addEventListener("click", checkAnswer);
    }

    const resultInput = document.getElementById("resultInput");
    if (resultInput) {
      resultInput.addEventListener("keypress", (event) => {
        if (event.key === "Enter") {
          checkAnswer();
        }
      });
    }
  </script>
</body>
