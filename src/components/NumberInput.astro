---
import type { HTMLAttributes } from "astro/types";

interface Props extends HTMLAttributes<"input"> {
  label?: string;
  placeholder?: string;
  value?: string;
  classes?: string;
  allowCommas?: boolean;
  size?: "sm" | "md" | "lg";
}

const {
  label = "",
  placeholder = "Enter numbers",
  value = "",
  classes = "",
  allowCommas = false,
  size = "md",
  ...rest
} = Astro.props;
---

<div class="input-container">
  {label && <label class="input-label" data-size={size}>{label}</label>}
  <input
    type="text"
    class:list={[classes, "input-field"]}
    placeholder={placeholder}
    value={value}
    data-allow-commas={allowCommas}
    data-size={size}
    {...rest}
  />
</div>

<style>
  .input-container {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .input-label {
    font-weight: bold;
  }

  .input-label[data-size="sm"] {
    font-size: 0.875rem;
  }

  .input-label[data-size="md"] {
    font-size: 1rem;
  }

  .input-label[data-size="lg"] {
    font-size: 1.25rem;
  }

  .input-field {
    border: 1px solid #ccc;
    border-radius: 5px;
    transition: border-color 0.3s, box-shadow 0.3s;
    width: 100%;
  }

  .input-field[data-size="sm"] {
    padding: 0.375rem 0.5rem;
    font-size: 0.875rem;
    width: 150px;
    height: 30px;
  }

  .input-field[data-size="md"] {
    padding: 0.5rem 0.75rem;
    font-size: 1rem;
    width: 200px;
    height: 35px;
  }

  .input-field[data-size="lg"] {
    padding: 0.75rem 1rem;
    font-size: 1.25rem;
    width: 250px;
    height: 40px;
  }

  .input-field:focus {
    outline: none;
    border-color: #3399ff;
    box-shadow: 0 0 3px #3399ff;
  }

  .input-field.error {
    border-color: #ff3333;
    box-shadow: 0 0 3px #ff3333;
  }
</style>

<script>
  class NumberInput extends HTMLElement {
    constructor() {
      super();
      this.setupInput();
    }

    setupInput() {
      const input = this.querySelector('input');
      if (!input) return;

      const allowCommas = input.dataset.allowCommas === 'true';
      const validationRegex = allowCommas ? /[^0-9,]/g : /[^0-9]/g;

      input.addEventListener('input', (e) => {
        const target = e.target as HTMLInputElement;
        const originalValue = target.value;
        const sanitizedValue = originalValue.replace(validationRegex, '');
        
        if (originalValue !== sanitizedValue) {
          target.value = sanitizedValue;
          input.classList.add('error');
          setTimeout(() => {
            input.classList.remove('error');
          }, 1000);
        }
      });

      if (allowCommas) {
        input.addEventListener('blur', (e) => {
          const target = e.target as HTMLInputElement;
          target.value = target.value
            .replace(/,+/g, ',')
            .replace(/^,|,$/, '');
        });
      }
    }
  }

  customElements.define('number-input', NumberInput);
</script>